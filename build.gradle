buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.intellij.platform' version "$pluginVersion"
    id 'org.jetbrains.kotlin.jvm' version '2.1.10'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    intellijPlatform {
        defaultRepositories()
    }
    maven {
        url = 'https://maven.atlassian.com/content/repositories/atlassian-public/'
    }
}

group 'ru.yandex'
version pluginVersion

allprojects {
    repositories {
        mavenCentral()
    }
}

buildSearchableOptions.enabled = false

dependencies {
    implementation "com.yandex.cloud:java-sdk-services:$YC_SDK_VERSION"
    implementation "com.yandex.cloud:java-sdk-functions:$YC_SDK_VERSION"
    implementation "com.yandex.cloud:java-sdk-auth:$YC_SDK_VERSION"

    implementation "com.google.protobuf:protobuf-java:$PROTOBUF_VERSION"
    implementation 'com.michaelbaranov:microba:0.4.4.3'

    intellijPlatform {
        intellijIdeaCommunity ideaVersion
        bundledPlugin 'com.intellij.modules.json'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '17'
    }
}

jar {
    archiveClassifier.set('raw')
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
    dependsOn(jarSearchableOptions)
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

patchPluginXml {
    sinceBuild = minIDEVersion
    untilBuild = maxIDEVersion

    copy {
        from changesFile
        into "build/changelog"
    }

//    markdownToHtml {
//        sourceDir file("build/changelog")
//        outputDir file("build/changelog")
//    }.runTask()
//
//    pluginDescription = file(descriptionFile).text
//    changeNotes = file("build/changelog/CHANGELOG.html").text
}

task printVersion {
    doLast {
        logger.lifecycle("::set-output name=plugin-version::" + project.version)
    }
}

buildPlugin.dependsOn(shadowJar)

task buildPluginRepository(type: Copy) {
    from './resources/pluginRepository.xml'
    into buildDir
    rename { "updatePlugins.xml" }
    expand("version": version, "sincebuild": minIDEVersion)
}
